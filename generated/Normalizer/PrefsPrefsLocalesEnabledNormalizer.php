<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace JoliCode\Slack\Api\Normalizer;

use Jane\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class PrefsPrefsLocalesEnabledNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'JoliCode\\Slack\\Api\\Model\\PrefsPrefsLocalesEnabled';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \JoliCode\Slack\Api\Model\PrefsPrefsLocalesEnabled;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        if (isset($data->{'$ref'})) {
            return new Reference($data->{'$ref'}, $context['document-origin']);
        }
        $object = new \JoliCode\Slack\Api\Model\PrefsPrefsLocalesEnabled();
        $data = clone $data;
        if (property_exists($data, 'de-DE')) {
            $object->setDeDE($data->{'de-DE'});
            unset($data->{'de-DE'});
        }
        if (property_exists($data, 'en-US')) {
            $object->setEnUS($data->{'en-US'});
            unset($data->{'en-US'});
        }
        if (property_exists($data, 'es-ES')) {
            $object->setEsES($data->{'es-ES'});
            unset($data->{'es-ES'});
        }
        if (property_exists($data, 'fr-FR')) {
            $object->setFrFR($data->{'fr-FR'});
            unset($data->{'fr-FR'});
        }
        if (property_exists($data, 'ja-JP')) {
            $object->setJaJP($data->{'ja-JP'});
            unset($data->{'ja-JP'});
        }
        if (property_exists($data, 'pseudo')) {
            $object->setPseudo($data->{'pseudo'});
            unset($data->{'pseudo'});
        }
        foreach ($data as $key => $value) {
            if (preg_match('/.*/', $key)) {
                $object[$key] = $value;
            }
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getDeDE()) {
            $data->{'de-DE'} = $object->getDeDE();
        }
        if (null !== $object->getEnUS()) {
            $data->{'en-US'} = $object->getEnUS();
        }
        if (null !== $object->getEsES()) {
            $data->{'es-ES'} = $object->getEsES();
        }
        if (null !== $object->getFrFR()) {
            $data->{'fr-FR'} = $object->getFrFR();
        }
        if (null !== $object->getJaJP()) {
            $data->{'ja-JP'} = $object->getJaJP();
        }
        if (null !== $object->getPseudo()) {
            $data->{'pseudo'} = $object->getPseudo();
        }
        foreach ($object as $key => $value) {
            if (preg_match('/.*/', $key)) {
                $data->{$key} = $value;
            }
        }

        return $data;
    }
}
