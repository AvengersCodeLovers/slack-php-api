<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace JoliCode\Slack\Api\Normalizer;

use Jane\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class ObjsMessageNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'JoliCode\\Slack\\Api\\Model\\ObjsMessage';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \JoliCode\Slack\Api\Model\ObjsMessage;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        if (isset($data->{'$ref'})) {
            return new Reference($data->{'$ref'}, $context['document-origin']);
        }
        $object = new \JoliCode\Slack\Api\Model\ObjsMessage();
        $data = clone $data;
        if (property_exists($data, 'attachments')) {
            $values = [];
            foreach ($data->{'attachments'} as $value) {
                $values[] = $this->denormalizer->denormalize($value, 'JoliCode\\Slack\\Api\\Model\\ObjsMessageAttachmentsItem', 'json', $context);
            }
            $object->setAttachments($values);
            unset($data->{'attachments'});
        }
        if (property_exists($data, 'files')) {
            $values_1 = [];
            foreach ($data->{'files'} as $value_1) {
                $values_1[] = $this->denormalizer->denormalize($value_1, 'JoliCode\\Slack\\Api\\Model\\ObjsFile', 'json', $context);
            }
            $object->setFiles($values_1);
            unset($data->{'files'});
        }
        if (property_exists($data, 'bot_id')) {
            $object->setBotId($data->{'bot_id'});
            unset($data->{'bot_id'});
        }
        if (property_exists($data, 'comment')) {
            $object->setComment($this->denormalizer->denormalize($data->{'comment'}, 'JoliCode\\Slack\\Api\\Model\\ObjsComment', 'json', $context));
            unset($data->{'comment'});
        }
        if (property_exists($data, 'display_as_bot')) {
            $object->setDisplayAsBot($data->{'display_as_bot'});
            unset($data->{'display_as_bot'});
        }
        if (property_exists($data, 'file')) {
            $object->setFile($this->denormalizer->denormalize($data->{'file'}, 'JoliCode\\Slack\\Api\\Model\\ObjsFile', 'json', $context));
            unset($data->{'file'});
        }
        if (property_exists($data, 'icons')) {
            $object->setIcons($this->denormalizer->denormalize($data->{'icons'}, 'JoliCode\\Slack\\Api\\Model\\ObjsMessageIcons', 'json', $context));
            unset($data->{'icons'});
        }
        if (property_exists($data, 'inviter')) {
            $object->setInviter($data->{'inviter'});
            unset($data->{'inviter'});
        }
        if (property_exists($data, 'is_intro')) {
            $object->setIsIntro($data->{'is_intro'});
            unset($data->{'is_intro'});
        }
        if (property_exists($data, 'last_read')) {
            $value_2 = $data->{'last_read'};
            if (is_float($data->{'last_read'})) {
                $value_2 = $data->{'last_read'};
            } elseif (is_string($data->{'last_read'})) {
                $value_2 = $data->{'last_read'};
            }
            $object->setLastRead($value_2);
            unset($data->{'last_read'});
        }
        if (property_exists($data, 'name')) {
            $object->setName($data->{'name'});
            unset($data->{'name'});
        }
        if (property_exists($data, 'old_name')) {
            $object->setOldName($data->{'old_name'});
            unset($data->{'old_name'});
        }
        if (property_exists($data, 'permalink')) {
            $object->setPermalink($data->{'permalink'});
            unset($data->{'permalink'});
        }
        if (property_exists($data, 'pinned_to')) {
            $values_2 = [];
            foreach ($data->{'pinned_to'} as $value_3) {
                $values_2[] = $value_3;
            }
            $object->setPinnedTo($values_2);
            unset($data->{'pinned_to'});
        }
        if (property_exists($data, 'purpose')) {
            $object->setPurpose($data->{'purpose'});
            unset($data->{'purpose'});
        }
        if (property_exists($data, 'reactions')) {
            $values_3 = [];
            foreach ($data->{'reactions'} as $value_4) {
                $values_3[] = $this->denormalizer->denormalize($value_4, 'JoliCode\\Slack\\Api\\Model\\ObjsReaction', 'json', $context);
            }
            $object->setReactions($values_3);
            unset($data->{'reactions'});
        }
        if (property_exists($data, 'replies')) {
            $values_4 = [];
            foreach ($data->{'replies'} as $value_5) {
                $values_4[] = $this->denormalizer->denormalize($value_5, 'JoliCode\\Slack\\Api\\Model\\ObjsMessageRepliesItem', 'json', $context);
            }
            $object->setReplies($values_4);
            unset($data->{'replies'});
        }
        if (property_exists($data, 'reply_count')) {
            $object->setReplyCount($data->{'reply_count'});
            unset($data->{'reply_count'});
        }
        if (property_exists($data, 'source_team')) {
            $object->setSourceTeam($data->{'source_team'});
            unset($data->{'source_team'});
        }
        if (property_exists($data, 'subscribed')) {
            $object->setSubscribed($data->{'subscribed'});
            unset($data->{'subscribed'});
        }
        if (property_exists($data, 'subtype')) {
            $object->setSubtype($data->{'subtype'});
            unset($data->{'subtype'});
        }
        if (property_exists($data, 'team')) {
            $object->setTeam($data->{'team'});
            unset($data->{'team'});
        }
        if (property_exists($data, 'text')) {
            $object->setText($data->{'text'});
            unset($data->{'text'});
        }
        if (property_exists($data, 'thread_ts')) {
            $value_6 = $data->{'thread_ts'};
            if (is_float($data->{'thread_ts'})) {
                $value_6 = $data->{'thread_ts'};
            } elseif (is_string($data->{'thread_ts'})) {
                $value_6 = $data->{'thread_ts'};
            }
            $object->setThreadTs($value_6);
            unset($data->{'thread_ts'});
        }
        if (property_exists($data, 'topic')) {
            $object->setTopic($data->{'topic'});
            unset($data->{'topic'});
        }
        if (property_exists($data, 'ts')) {
            $value_7 = $data->{'ts'};
            if (is_float($data->{'ts'})) {
                $value_7 = $data->{'ts'};
            } elseif (is_string($data->{'ts'})) {
                $value_7 = $data->{'ts'};
            }
            $object->setTs($value_7);
            unset($data->{'ts'});
        }
        if (property_exists($data, 'type')) {
            $object->setType($data->{'type'});
            unset($data->{'type'});
        }
        if (property_exists($data, 'unread_count')) {
            $object->setUnreadCount($data->{'unread_count'});
            unset($data->{'unread_count'});
        }
        if (property_exists($data, 'upload')) {
            $object->setUpload($data->{'upload'});
            unset($data->{'upload'});
        }
        if (property_exists($data, 'user')) {
            $object->setUser($data->{'user'});
            unset($data->{'user'});
        }
        if (property_exists($data, 'user_profile')) {
            $object->setUserProfile($this->denormalizer->denormalize($data->{'user_profile'}, 'JoliCode\\Slack\\Api\\Model\\ObjsUserProfileShort', 'json', $context));
            unset($data->{'user_profile'});
        }
        if (property_exists($data, 'user_team')) {
            $object->setUserTeam($data->{'user_team'});
            unset($data->{'user_team'});
        }
        if (property_exists($data, 'username')) {
            $object->setUsername($data->{'username'});
            unset($data->{'username'});
        }
        foreach ($data as $key => $value_8) {
            if (preg_match('/.*/', $key)) {
                $object[$key] = $value_8;
            }
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getAttachments()) {
            $values = [];
            foreach ($object->getAttachments() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $data->{'attachments'} = $values;
        }
        if (null !== $object->getFiles()) {
            $values_1 = [];
            foreach ($object->getFiles() as $value_1) {
                $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
            }
            $data->{'files'} = $values_1;
        }
        if (null !== $object->getBotId()) {
            $data->{'bot_id'} = $object->getBotId();
        }
        if (null !== $object->getComment()) {
            $data->{'comment'} = $this->normalizer->normalize($object->getComment(), 'json', $context);
        }
        if (null !== $object->getDisplayAsBot()) {
            $data->{'display_as_bot'} = $object->getDisplayAsBot();
        }
        if (null !== $object->getFile()) {
            $data->{'file'} = $this->normalizer->normalize($object->getFile(), 'json', $context);
        }
        if (null !== $object->getIcons()) {
            $data->{'icons'} = $this->normalizer->normalize($object->getIcons(), 'json', $context);
        }
        if (null !== $object->getInviter()) {
            $data->{'inviter'} = $object->getInviter();
        }
        if (null !== $object->getIsIntro()) {
            $data->{'is_intro'} = $object->getIsIntro();
        }
        if (null !== $object->getLastRead()) {
            $value_2 = $object->getLastRead();
            if (is_float($object->getLastRead())) {
                $value_2 = $object->getLastRead();
            } elseif (is_string($object->getLastRead())) {
                $value_2 = $object->getLastRead();
            }
            $data->{'last_read'} = $value_2;
        }
        if (null !== $object->getName()) {
            $data->{'name'} = $object->getName();
        }
        if (null !== $object->getOldName()) {
            $data->{'old_name'} = $object->getOldName();
        }
        if (null !== $object->getPermalink()) {
            $data->{'permalink'} = $object->getPermalink();
        }
        if (null !== $object->getPinnedTo()) {
            $values_2 = [];
            foreach ($object->getPinnedTo() as $value_3) {
                $values_2[] = $value_3;
            }
            $data->{'pinned_to'} = $values_2;
        }
        if (null !== $object->getPurpose()) {
            $data->{'purpose'} = $object->getPurpose();
        }
        if (null !== $object->getReactions()) {
            $values_3 = [];
            foreach ($object->getReactions() as $value_4) {
                $values_3[] = $this->normalizer->normalize($value_4, 'json', $context);
            }
            $data->{'reactions'} = $values_3;
        }
        if (null !== $object->getReplies()) {
            $values_4 = [];
            foreach ($object->getReplies() as $value_5) {
                $values_4[] = $this->normalizer->normalize($value_5, 'json', $context);
            }
            $data->{'replies'} = $values_4;
        }
        if (null !== $object->getReplyCount()) {
            $data->{'reply_count'} = $object->getReplyCount();
        }
        if (null !== $object->getSourceTeam()) {
            $data->{'source_team'} = $object->getSourceTeam();
        }
        if (null !== $object->getSubscribed()) {
            $data->{'subscribed'} = $object->getSubscribed();
        }
        if (null !== $object->getSubtype()) {
            $data->{'subtype'} = $object->getSubtype();
        }
        if (null !== $object->getTeam()) {
            $data->{'team'} = $object->getTeam();
        }
        if (null !== $object->getText()) {
            $data->{'text'} = $object->getText();
        }
        if (null !== $object->getThreadTs()) {
            $value_6 = $object->getThreadTs();
            if (is_float($object->getThreadTs())) {
                $value_6 = $object->getThreadTs();
            } elseif (is_string($object->getThreadTs())) {
                $value_6 = $object->getThreadTs();
            }
            $data->{'thread_ts'} = $value_6;
        }
        if (null !== $object->getTopic()) {
            $data->{'topic'} = $object->getTopic();
        }
        if (null !== $object->getTs()) {
            $value_7 = $object->getTs();
            if (is_float($object->getTs())) {
                $value_7 = $object->getTs();
            } elseif (is_string($object->getTs())) {
                $value_7 = $object->getTs();
            }
            $data->{'ts'} = $value_7;
        }
        if (null !== $object->getType()) {
            $data->{'type'} = $object->getType();
        }
        if (null !== $object->getUnreadCount()) {
            $data->{'unread_count'} = $object->getUnreadCount();
        }
        if (null !== $object->getUpload()) {
            $data->{'upload'} = $object->getUpload();
        }
        if (null !== $object->getUser()) {
            $data->{'user'} = $object->getUser();
        }
        if (null !== $object->getUserProfile()) {
            $data->{'user_profile'} = $this->normalizer->normalize($object->getUserProfile(), 'json', $context);
        }
        if (null !== $object->getUserTeam()) {
            $data->{'user_team'} = $object->getUserTeam();
        }
        if (null !== $object->getUsername()) {
            $data->{'username'} = $object->getUsername();
        }
        foreach ($object as $key => $value_8) {
            if (preg_match('/.*/', $key)) {
                $data->{$key} = $value_8;
            }
        }

        return $data;
    }
}
