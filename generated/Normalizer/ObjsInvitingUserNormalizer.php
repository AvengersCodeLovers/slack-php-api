<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace JoliCode\Slack\Api\Normalizer;

use Jane\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class ObjsInvitingUserNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'JoliCode\\Slack\\Api\\Model\\ObjsInvitingUser';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \JoliCode\Slack\Api\Model\ObjsInvitingUser;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        if (isset($data->{'$ref'})) {
            return new Reference($data->{'$ref'}, $context['document-origin']);
        }
        $object = new \JoliCode\Slack\Api\Model\ObjsInvitingUser();
        $data = clone $data;
        if (property_exists($data, 'id')) {
            $object->setId($data->{'id'});
            unset($data->{'id'});
        }
        if (property_exists($data, 'is_app_user')) {
            $object->setIsAppUser($data->{'is_app_user'});
            unset($data->{'is_app_user'});
        }
        if (property_exists($data, 'is_restricted')) {
            $object->setIsRestricted($data->{'is_restricted'});
            unset($data->{'is_restricted'});
        }
        if (property_exists($data, 'is_ultra_restricted')) {
            $object->setIsUltraRestricted($data->{'is_ultra_restricted'});
            unset($data->{'is_ultra_restricted'});
        }
        if (property_exists($data, 'name')) {
            $object->setName($data->{'name'});
            unset($data->{'name'});
        }
        if (property_exists($data, 'profile')) {
            $object->setProfile($this->denormalizer->denormalize($data->{'profile'}, 'JoliCode\\Slack\\Api\\Model\\ObjsUserProfileShortest', 'json', $context));
            unset($data->{'profile'});
        }
        if (property_exists($data, 'real_name')) {
            $object->setRealName($data->{'real_name'});
            unset($data->{'real_name'});
        }
        if (property_exists($data, 'team_id')) {
            $object->setTeamId($data->{'team_id'});
            unset($data->{'team_id'});
        }
        if (property_exists($data, 'updated')) {
            $object->setUpdated($data->{'updated'});
            unset($data->{'updated'});
        }
        foreach ($data as $key => $value) {
            if (preg_match('/.*/', $key)) {
                $object[$key] = $value;
            }
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getId()) {
            $data->{'id'} = $object->getId();
        }
        if (null !== $object->getIsAppUser()) {
            $data->{'is_app_user'} = $object->getIsAppUser();
        }
        if (null !== $object->getIsRestricted()) {
            $data->{'is_restricted'} = $object->getIsRestricted();
        }
        if (null !== $object->getIsUltraRestricted()) {
            $data->{'is_ultra_restricted'} = $object->getIsUltraRestricted();
        }
        if (null !== $object->getName()) {
            $data->{'name'} = $object->getName();
        }
        if (null !== $object->getProfile()) {
            $data->{'profile'} = $this->normalizer->normalize($object->getProfile(), 'json', $context);
        }
        if (null !== $object->getRealName()) {
            $data->{'real_name'} = $object->getRealName();
        }
        if (null !== $object->getTeamId()) {
            $data->{'team_id'} = $object->getTeamId();
        }
        if (null !== $object->getUpdated()) {
            $data->{'updated'} = $object->getUpdated();
        }
        foreach ($object as $key => $value) {
            if (preg_match('/.*/', $key)) {
                $data->{$key} = $value;
            }
        }

        return $data;
    }
}
