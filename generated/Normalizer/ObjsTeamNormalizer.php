<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace JoliCode\Slack\Api\Normalizer;

use Jane\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class ObjsTeamNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'JoliCode\\Slack\\Api\\Model\\ObjsTeam';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \JoliCode\Slack\Api\Model\ObjsTeam;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        if (isset($data->{'$ref'})) {
            return new Reference($data->{'$ref'}, $context['document-origin']);
        }
        $object = new \JoliCode\Slack\Api\Model\ObjsTeam();
        $data = clone $data;
        if (property_exists($data, 'avatar_base_url')) {
            $object->setAvatarBaseUrl($data->{'avatar_base_url'});
            unset($data->{'avatar_base_url'});
        }
        if (property_exists($data, 'domain')) {
            $object->setDomain($data->{'domain'});
            unset($data->{'domain'});
        }
        if (property_exists($data, 'email_domain')) {
            $object->setEmailDomain($data->{'email_domain'});
            unset($data->{'email_domain'});
        }
        if (property_exists($data, 'enterprise_id')) {
            $object->setEnterpriseId($data->{'enterprise_id'});
            unset($data->{'enterprise_id'});
        }
        if (property_exists($data, 'enterprise_name')) {
            $object->setEnterpriseName($data->{'enterprise_name'});
            unset($data->{'enterprise_name'});
        }
        if (property_exists($data, 'has_compliance_export')) {
            $object->setHasComplianceExport($data->{'has_compliance_export'});
            unset($data->{'has_compliance_export'});
        }
        if (property_exists($data, 'icon')) {
            $object->setIcon($this->denormalizer->denormalize($data->{'icon'}, 'JoliCode\\Slack\\Api\\Model\\ObjsTeamIcon', 'json', $context));
            unset($data->{'icon'});
        }
        if (property_exists($data, 'id')) {
            $object->setId($data->{'id'});
            unset($data->{'id'});
        }
        if (property_exists($data, 'messages_count')) {
            $object->setMessagesCount($data->{'messages_count'});
            unset($data->{'messages_count'});
        }
        if (property_exists($data, 'msg_edit_window_mins')) {
            $object->setMsgEditWindowMins($data->{'msg_edit_window_mins'});
            unset($data->{'msg_edit_window_mins'});
        }
        if (property_exists($data, 'name')) {
            $object->setName($data->{'name'});
            unset($data->{'name'});
        }
        if (property_exists($data, 'over_integrations_limit')) {
            $object->setOverIntegrationsLimit($data->{'over_integrations_limit'});
            unset($data->{'over_integrations_limit'});
        }
        if (property_exists($data, 'over_storage_limit')) {
            $object->setOverStorageLimit($data->{'over_storage_limit'});
            unset($data->{'over_storage_limit'});
        }
        if (property_exists($data, 'plan')) {
            $object->setPlan($data->{'plan'});
            unset($data->{'plan'});
        }
        if (property_exists($data, 'prefs')) {
            $object->setPrefs($this->denormalizer->denormalize($data->{'prefs'}, 'JoliCode\\Slack\\Api\\Model\\TeamPrefsPrefs', 'json', $context));
            unset($data->{'prefs'});
        }
        foreach ($data as $key => $value) {
            if (preg_match('/.*/', $key)) {
                $object[$key] = $value;
            }
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getAvatarBaseUrl()) {
            $data->{'avatar_base_url'} = $object->getAvatarBaseUrl();
        }
        if (null !== $object->getDomain()) {
            $data->{'domain'} = $object->getDomain();
        }
        if (null !== $object->getEmailDomain()) {
            $data->{'email_domain'} = $object->getEmailDomain();
        }
        if (null !== $object->getEnterpriseId()) {
            $data->{'enterprise_id'} = $object->getEnterpriseId();
        }
        if (null !== $object->getEnterpriseName()) {
            $data->{'enterprise_name'} = $object->getEnterpriseName();
        }
        if (null !== $object->getHasComplianceExport()) {
            $data->{'has_compliance_export'} = $object->getHasComplianceExport();
        }
        if (null !== $object->getIcon()) {
            $data->{'icon'} = $this->normalizer->normalize($object->getIcon(), 'json', $context);
        }
        if (null !== $object->getId()) {
            $data->{'id'} = $object->getId();
        }
        if (null !== $object->getMessagesCount()) {
            $data->{'messages_count'} = $object->getMessagesCount();
        }
        if (null !== $object->getMsgEditWindowMins()) {
            $data->{'msg_edit_window_mins'} = $object->getMsgEditWindowMins();
        }
        if (null !== $object->getName()) {
            $data->{'name'} = $object->getName();
        }
        if (null !== $object->getOverIntegrationsLimit()) {
            $data->{'over_integrations_limit'} = $object->getOverIntegrationsLimit();
        }
        if (null !== $object->getOverStorageLimit()) {
            $data->{'over_storage_limit'} = $object->getOverStorageLimit();
        }
        if (null !== $object->getPlan()) {
            $data->{'plan'} = $object->getPlan();
        }
        if (null !== $object->getPrefs()) {
            $data->{'prefs'} = $this->normalizer->normalize($object->getPrefs(), 'json', $context);
        }
        foreach ($object as $key => $value) {
            if (preg_match('/.*/', $key)) {
                $data->{$key} = $value;
            }
        }

        return $data;
    }
}
