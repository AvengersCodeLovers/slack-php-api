<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace JoliCode\Slack\Api\Normalizer;

use Jane\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class UsersGetPresenceGetResponse200Normalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'JoliCode\\Slack\\Api\\Model\\UsersGetPresenceGetResponse200';
    }

    public function supportsNormalization($data, $format = null)
    {
        return get_class($data) === 'JoliCode\\Slack\\Api\\Model\\UsersGetPresenceGetResponse200';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        if (isset($data->{'$ref'})) {
            return new Reference($data->{'$ref'}, $context['document-origin']);
        }
        $object = new \JoliCode\Slack\Api\Model\UsersGetPresenceGetResponse200();
        $data = clone $data;
        if (property_exists($data, 'auto_away') && $data->{'auto_away'} !== null) {
            $object->setAutoAway($data->{'auto_away'});
            unset($data->{'auto_away'});
        }
        if (property_exists($data, 'connection_count') && $data->{'connection_count'} !== null) {
            $object->setConnectionCount($data->{'connection_count'});
            unset($data->{'connection_count'});
        }
        if (property_exists($data, 'last_activity') && $data->{'last_activity'} !== null) {
            $object->setLastActivity($data->{'last_activity'});
            unset($data->{'last_activity'});
        }
        if (property_exists($data, 'manual_away') && $data->{'manual_away'} !== null) {
            $object->setManualAway($data->{'manual_away'});
            unset($data->{'manual_away'});
        }
        if (property_exists($data, 'ok') && $data->{'ok'} !== null) {
            $object->setOk($data->{'ok'});
            unset($data->{'ok'});
        }
        if (property_exists($data, 'online') && $data->{'online'} !== null) {
            $object->setOnline($data->{'online'});
            unset($data->{'online'});
        }
        if (property_exists($data, 'presence') && $data->{'presence'} !== null) {
            $object->setPresence($data->{'presence'});
            unset($data->{'presence'});
        }
        foreach ($data as $key => $value) {
            if (preg_match('/.*/', $key)) {
                $object[$key] = $value;
            }
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getAutoAway()) {
            $data->{'auto_away'} = $object->getAutoAway();
        }
        if (null !== $object->getConnectionCount()) {
            $data->{'connection_count'} = $object->getConnectionCount();
        }
        if (null !== $object->getLastActivity()) {
            $data->{'last_activity'} = $object->getLastActivity();
        }
        if (null !== $object->getManualAway()) {
            $data->{'manual_away'} = $object->getManualAway();
        }
        if (null !== $object->getOk()) {
            $data->{'ok'} = $object->getOk();
        }
        if (null !== $object->getOnline()) {
            $data->{'online'} = $object->getOnline();
        }
        if (null !== $object->getPresence()) {
            $data->{'presence'} = $object->getPresence();
        }
        foreach ($object as $key => $value) {
            if (preg_match('/.*/', $key)) {
                $data->{$key} = $value;
            }
        }

        return $data;
    }
}
